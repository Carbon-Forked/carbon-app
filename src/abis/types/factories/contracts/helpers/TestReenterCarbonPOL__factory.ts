/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestReenterCarbonPOL,
  TestReenterCarbonPOLInterface,
} from "../../../contracts/helpers/TestReenterCarbonPOL";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICarbonPOL",
        name: "carbonPOLInit",
        type: "address",
      },
      {
        internalType: "Token",
        name: "tokenInit",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "tryReenterCarbonPOL",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161029b38038061029b83398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a0516101d36100c860003960008181603e015260fe0152600081816077015261013501526101d36000f3fe6080604052600436106100225760003560e01c8063f07de200146100d957600080fd5b366100d457604051634747919d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152670de0b6b3a764000060248301819052917f000000000000000000000000000000000000000000000000000000000000000090911690634747919d9034906044016000604051808303818588803b1580156100be57600080fd5b505af11580156100d2573d6000803e3d6000fd5b005b600080fd5b6100d26100e7366004610196565b604051634747919d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526001600160801b03831660248301527f00000000000000000000000000000000000000000000000000000000000000001690634747919d9034906044016000604051808303818588803b15801561017a57600080fd5b505af115801561018e573d6000803e3d6000fd5b505050505050565b6000602082840312156101a857600080fd5b81356001600160801b03811681146101bf57600080fd5b939250505056fea164736f6c6343000813000a";

type TestReenterCarbonPOLConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestReenterCarbonPOLConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestReenterCarbonPOL__factory extends ContractFactory {
  constructor(...args: TestReenterCarbonPOLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    carbonPOLInit: string,
    tokenInit: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestReenterCarbonPOL> {
    return super.deploy(
      carbonPOLInit,
      tokenInit,
      overrides || {}
    ) as Promise<TestReenterCarbonPOL>;
  }
  override getDeployTransaction(
    carbonPOLInit: string,
    tokenInit: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      carbonPOLInit,
      tokenInit,
      overrides || {}
    );
  }
  override attach(address: string): TestReenterCarbonPOL {
    return super.attach(address) as TestReenterCarbonPOL;
  }
  override connect(signer: Signer): TestReenterCarbonPOL__factory {
    return super.connect(signer) as TestReenterCarbonPOL__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestReenterCarbonPOLInterface {
    return new utils.Interface(_abi) as TestReenterCarbonPOLInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestReenterCarbonPOL {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestReenterCarbonPOL;
  }
}
