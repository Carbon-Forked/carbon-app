/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPairs,
  TestPairsInterface,
} from "../../../contracts/helpers/TestPairs";

const _abi = [
  {
    inputs: [],
    name: "PairAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "PairDoesNotExist",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "pairId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "Token",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "Token",
        name: "token1",
        type: "address",
      },
    ],
    name: "PairCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token0",
        type: "address",
      },
      {
        internalType: "Token",
        name: "token1",
        type: "address",
      },
    ],
    name: "createPairTest",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "Token[2]",
            name: "tokens",
            type: "address[2]",
          },
        ],
        internalType: "struct Pair",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "pairId",
        type: "uint128",
      },
    ],
    name: "pairByIdTest",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "Token[2]",
            name: "tokens",
            type: "address[2]",
          },
        ],
        internalType: "struct Pair",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610559806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632b005d331461003b578063e566bb9b14610064575b600080fd5b61004e61004936600461043a565b610077565b60405161005b9190610463565b60405180910390f35b61004e6100723660046104ce565b61008e565b61007f610387565b610088826100a7565b92915050565b610096610387565b6100a08383610167565b9392505050565b6100af610387565b6001600160801b038216600090815260026020819052604080832081518083019283905292909182845b81546001600160a01b031681526001909101906020018083116100d9575050505050905060006001600160a01b03168160006002811061011b5761011b610501565b60200201516001600160a01b0316036101475760405163317f12fd60e21b815260040160405180910390fd5b604080518082019091526001600160801b03909316835260208301525090565b61016f610387565b61017983836102be565b156101975760405163c9bb25eb60e01b815260040160405180910390fd5b60006101a38484610321565b60008054919250906101c5906201000090046001600160801b03166001610517565b6000805471ffffffffffffffffffffffffffffffff00001916620100006001600160801b0384169081029190911782558152600260208190526040909120919250610212919084906103af565b5081516001600160a01b039081166000908152600160209081526040808320828701805186168552925280832080546fffffffffffffffffffffffffffffffff19166001600160801b0387169081179091559151865191519085169491909116927f6365c594f5448f79c1cc1e6f661bdbf1d16f2e8f85747e13f8e80f1fd168b7c391a46040518060400160405280826001600160801b03168152602001838152509250505092915050565b6000806102cb8484610321565b80516001600160a01b039081166000908152600160209081526040808320828601519094168352929052908120549192506001600160801b039091169003610317576000915050610088565b5060019392505050565b610329610407565b816001600160a01b0316836001600160a01b03161061036557604080518082019091526001600160a01b038084168252841660208201526100a0565b50604080518082019091526001600160a01b0392831681529116602082015290565b604051806040016040528060006001600160801b031681526020016103aa610407565b905290565b82600281019282156103f7579160200282015b828111156103f757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906103c2565b50610403929150610425565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156104035760008155600101610426565b60006020828403121561044c57600080fd5b81356001600160801b03811681146100a057600080fd5b81516001600160801b0316815260208083015160608301919081840160005b60028110156104a85782516001600160a01b031682529183019190830190600101610482565b5050505092915050565b80356001600160a01b03811681146104c957600080fd5b919050565b600080604083850312156104e157600080fd5b6104ea836104b2565b91506104f8602084016104b2565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160801b0381811683821601908082111561054557634e487b7160e01b600052601160045260246000fd5b509291505056fea164736f6c6343000813000a";

type TestPairsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPairsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPairs__factory extends ContractFactory {
  constructor(...args: TestPairsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestPairs> {
    return super.deploy(overrides || {}) as Promise<TestPairs>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPairs {
    return super.attach(address) as TestPairs;
  }
  override connect(signer: Signer): TestPairs__factory {
    return super.connect(signer) as TestPairs__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPairsInterface {
    return new utils.Interface(_abi) as TestPairsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPairs {
    return new Contract(address, _abi, signerOrProvider) as TestPairs;
  }
}
