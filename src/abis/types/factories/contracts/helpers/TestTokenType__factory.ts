/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestTokenType,
  TestTokenTypeInterface,
} from "../../../contracts/helpers/TestTokenType";

const _abi = [
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
    ],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token1",
        type: "address",
      },
      {
        internalType: "Token",
        name: "token2",
        type: "address",
      },
    ],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
    ],
    name: "isNative",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token",
        name: "token",
        type: "address",
      },
    ],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bb5806100206000396000f3fe60806040526004361061007f5760003560e01c8063d449a8321161004e578063d449a8321461012f578063d9fc4b6114610161578063eb5625d914610181578063f7888aec146101a157600080fd5b8063685658bb1461008b578063a86e3576146100c0578063b2b8b5dd146100ed578063d1660f991461010d57600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610930565b6101cf565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db366004610969565b6101ea565b6040516100b791906109b1565b3480156100f957600080fd5b506100ab610108366004610969565b6101fe565b34801561011957600080fd5b5061012d6101283660046109e4565b610212565b005b34801561013b57600080fd5b5061014f61014a366004610969565b61022b565b60405160ff90911681526020016100b7565b34801561016d57600080fd5b5061012d61017c366004610a25565b61023f565b34801561018d57600080fd5b5061012d61019c3660046109e4565b61025a565b3480156101ad57600080fd5b506101c16101bc366004610930565b61026e565b6040519081526020016100b7565b60006001600160a01b03808416908316145b90505b92915050565b60606101e4826001600160a01b0316610283565b60006101e4826001600160a01b0316610319565b6102266001600160a01b0384168383610340565b505050565b60006101e4826001600160a01b03166103a5565b6102546001600160a01b03851684848461041f565b50505050565b6102266001600160a01b0384168383610449565b60006101e16001600160a01b03841683610470565b606061028e82610319565b156102b3575050604080518082019091526004815263242120a960e11b602082015290565b816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101e49190810190610a8c565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146101e4565b8060000361034d57505050565b61035683610319565b15610391576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610254573d6000803e3d6000fd5b6102266001600160a01b03841683836104fe565b60006103b082610319565b156103bd57506008919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e49190610b2e565b801580610430575061043084610319565b610254576102546001600160a01b038516848484610561565b61045283610319565b1561045c57505050565b6102266001600160a01b0384168383610599565b600061047b83610319565b1561049157506001600160a01b038116316101e4565b826040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e19190610b51565b6040516001600160a01b03831660248201526044810182905261022690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106b3565b6040516001600160a01b03808516602483015283166044820152606481018290526102549085906323b872dd60e01b9060840161052a565b8015806106135750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190610b51565b155b6106835760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b03831660248201526044810182905261022690849063095ea7b360e01b9060640161052a565b6000610708826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107889092919063ffffffff16565b90508051600014806107295750808060200190518101906107299190610b6a565b6102265760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161067a565b6060610797848460008561079f565b949350505050565b6060824710156108005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161067a565b600080866001600160a01b0316858760405161081c9190610b8c565b60006040518083038185875af1925050503d8060008114610859576040519150601f19603f3d011682016040523d82523d6000602084013e61085e565b606091505b509150915061086f8783838761087a565b979650505050505050565b606083156108e95782516000036108e2576001600160a01b0385163b6108e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067a565b5081610797565b61079783838151156108fe5781518083602001fd5b8060405162461bcd60e51b815260040161067a91906109b1565b6001600160a01b038116811461092d57600080fd5b50565b6000806040838503121561094357600080fd5b823561094e81610918565b9150602083013561095e81610918565b809150509250929050565b60006020828403121561097b57600080fd5b813561098681610918565b9392505050565b60005b838110156109a8578181015183820152602001610990565b50506000910152565b60208152600082518060208401526109d081604085016020870161098d565b601f01601f19169190910160400192915050565b6000806000606084860312156109f957600080fd5b8335610a0481610918565b92506020840135610a1481610918565b929592945050506040919091013590565b60008060008060808587031215610a3b57600080fd5b8435610a4681610918565b93506020850135610a5681610918565b92506040850135610a6681610918565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610a9e57600080fd5b815167ffffffffffffffff80821115610ab657600080fd5b818401915084601f830112610aca57600080fd5b815181811115610adc57610adc610a76565b604051601f8201601f19908116603f01168101908382118183101715610b0457610b04610a76565b81604052828152876020848701011115610b1d57600080fd5b61086f83602083016020880161098d565b600060208284031215610b4057600080fd5b815160ff8116811461098657600080fd5b600060208284031215610b6357600080fd5b5051919050565b600060208284031215610b7c57600080fd5b8151801515811461098657600080fd5b60008251610b9e81846020870161098d565b919091019291505056fea164736f6c6343000813000a";

type TestTokenTypeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenTypeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTokenType__factory extends ContractFactory {
  constructor(...args: TestTokenTypeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestTokenType> {
    return super.deploy(overrides || {}) as Promise<TestTokenType>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTokenType {
    return super.attach(address) as TestTokenType;
  }
  override connect(signer: Signer): TestTokenType__factory {
    return super.connect(signer) as TestTokenType__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenTypeInterface {
    return new utils.Interface(_abi) as TestTokenTypeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTokenType {
    return new Contract(address, _abi, signerOrProvider) as TestTokenType;
  }
}
