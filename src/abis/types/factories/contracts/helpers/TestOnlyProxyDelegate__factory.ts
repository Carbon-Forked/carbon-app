/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestOnlyProxyDelegate,
  TestOnlyProxyDelegateInterface,
} from "../../../contracts/helpers/TestOnlyProxyDelegate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "UnknownDelegator",
    type: "error",
  },
  {
    inputs: [],
    name: "testOnlyProxyDelegate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161013438038061013483398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805160ac61008860003960006060015260ac6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c4cb3d0c14602d575b600080fd5b60336047565b604051901515815260200160405180910390f35b6000604f6055565b50600190565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614609d5760405163d0c8bfe560e01b815260040160405180910390fd5b56fea164736f6c6343000813000a";

type TestOnlyProxyDelegateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestOnlyProxyDelegateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestOnlyProxyDelegate__factory extends ContractFactory {
  constructor(...args: TestOnlyProxyDelegateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    delegator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<TestOnlyProxyDelegate> {
    return super.deploy(
      delegator,
      overrides || {}
    ) as Promise<TestOnlyProxyDelegate>;
  }
  override getDeployTransaction(
    delegator: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(delegator, overrides || {});
  }
  override attach(address: string): TestOnlyProxyDelegate {
    return super.attach(address) as TestOnlyProxyDelegate;
  }
  override connect(signer: Signer): TestOnlyProxyDelegate__factory {
    return super.connect(signer) as TestOnlyProxyDelegate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOnlyProxyDelegateInterface {
    return new utils.Interface(_abi) as TestOnlyProxyDelegateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestOnlyProxyDelegate {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestOnlyProxyDelegate;
  }
}
