/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestMathEx,
  TestMathExInterface,
} from "../../../contracts/helpers/TestMathEx";

const _abi = [
  {
    inputs: [],
    name: "Overflow",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "n",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Fraction",
        name: "f",
        type: "tuple",
      },
    ],
    name: "exp2",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "n",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Fraction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "minFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    name: "mulDivC",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    name: "mulDivF",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ec806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c80629593f314610050578063a0175ab314610076578063f2dad25014610089578063f8f219271461009c575b600080fd5b61006361005e3660046106fd565b6100ca565b6040519081526020015b60405180910390f35b6100636100843660046106fd565b6100e1565b610063610097366004610729565b6100ee565b6100af6100aa36600461074b565b610103565b6040805182518152602092830151928101929092520161006d565b60006100d7848484610120565b90505b9392505050565b60006100d784848461016f565b60006100fa838361024a565b90505b92915050565b60408051808201909152600080825260208201526100fd8261027c565b60008061012e85858561016f565b9050600061013d868686610603565b11156100d757600019811061016557604051631a93c68960e11b815260040160405180910390fd5b60010190506100da565b600080600061017e868661061e565b91509150816000036101a357838181610199576101996107a8565b04925050506100da565b8382106101c357604051631a93c68960e11b815260040160405180910390fd5b60006101d0878787610603565b90506000806101e0858585610659565b9150915081600003610208578681816101fb576101fb6107a8565b04955050505050506100da565b600087810388169061021b848484610689565b90506000610237838b81610231576102316107a8565b046106c6565b919091029b9a5050505050505050505050565b6000806000610259858561061e565b915091508019821161026e5781600101610273565b816002015b95945050505050565b604080518082019091526000808252602082015260006102b56f58b90bfbe8e7bcd5e4f1d9cc01f97b578460000151856020015161016f565b905060008080600160831b84106102df57604051631a93c68960e11b815260040160405180910390fd5b6001607c1b840692508291506001607f1b8280020491506710e1b3be415a00008202016001607f1b8383020491506705a0913f6b1e00008202016001607f1b838302049150670168244fdac780008202016001607f1b838302049150664807432bc180008202016001607f1b838302049150660c0135dca040008202016001607f1b8383020491506601b707b1cdc0008202016001607f1b8383020491506536e0f639b8008202016001607f1b838302049150650618fee9f8008202016001607f1b838302049150649c197dcc008202016001607f1b838302049150640e30dce4008202016001607f1b83830204915064012ebd13008202016001607f1b8383020491506317499f008202016001607f1b8383020491506301a9d4808202016001607f1b838302049150621c63808202016001607f1b8383020491506201c6388202016001607f1b838302049150611ab88202016001607f1b83830204915061017c8202016001607f1b83830204915060148202016001607f1b83830204915081016001607f1b836721c3677c82b400008304010190506001607c1b8416156104ac5770018ebef9eac820ae8682b9793ac6d1e7767001c3d6a24ed82218787d624d3e5eba95f982020490505b6001607d1b8416156104e2577001368b2fc6f9609fe7aceb46aa619baed470018ebef9eac820ae8682b9793ac6d1e77882020490505b6001607e1b841615610517576fbc5ab1b16779be3575bd8f0520a9f21f7001368b2fc6f9609fe7aceb46aa619baed582020490505b6001607f1b84161561054b576f454aaa8efe072e7f6ddbab84b40a55c96fbc5ab1b16779be3575bd8f0520a9f21e82020490505b600160801b84161561057f576f0960aadc109e7a3bf4578099615711ea6f454aaa8efe072e7f6ddbab84b40a55c582020490505b600160811b8416156105b2576e2bf84208204f5977f9a8cf01fdce3d6f0960aadc109e7a3bf4578099615711d782020490505b600160821b8416156105e3576d03c6ab775dd0b95b4cbee7e65d116e2bf84208204f5977f9a8cf01fdc30782020490505b604080518082019091529081526001607f1b602082015295945050505050565b60008180610613576106136107a8565b838509949350505050565b600080600061062d85856106ee565b9050848402808210610646579081900392509050610652565b60018183030393509150505b9250929050565b60008082841061066f5750839050818303610681565b61067a6001866107be565b9150508183035b935093915050565b6000806106a783808303816106a0576106a06107a8565b0460010190565b90508284816106b8576106b86107a8565b048186021795945050505050565b60006001815b60088110156106e757838202600203820291506001016106cc565b5092915050565b60006000198284099392505050565b60008060006060848603121561071257600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561073c57600080fd5b50508035926020909101359150565b60006040828403121561075d57600080fd5b6040516040810181811067ffffffffffffffff8211171561078e57634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b634e487b7160e01b600052601260045260246000fd5b818103818111156100fd57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000813000a";

type TestMathExConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMathExConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMathEx__factory extends ContractFactory {
  constructor(...args: TestMathExConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestMathEx> {
    return super.deploy(overrides || {}) as Promise<TestMathEx>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMathEx {
    return super.attach(address) as TestMathEx;
  }
  override connect(signer: Signer): TestMathEx__factory {
    return super.connect(signer) as TestMathEx__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMathExInterface {
    return new utils.Interface(_abi) as TestMathExInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMathEx {
    return new Contract(address, _abi, signerOrProvider) as TestMathEx;
  }
}
